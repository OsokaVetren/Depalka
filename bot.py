#–∏–º–ø–æ—Ä—Ç —Ä–∞–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –Ω–∞—Ö—É–π
import asyncio
import logging
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from Config.config_reader import config
from bd_handler import is_user_valid, new_user, eballs_balance

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.bot_token.get_secret_value())
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

class FSM(StatesGroup):
    RegLogState = State()
    Login = State()
    Password = State()
    Depalka = State()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç–µ–ª—å–Ω–∏–∫! –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π - —Ç—ã –≤–æ—à—ë–ª –≤ –¥–æ–¥–µ–ø–∞–ª–∫—É, —Ç–≥-–±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –µ-–±–∞–ª–ª–æ–≤. –ï—Å—Ç—å –¥–≤–∞ —Å—Ç—É–ª–∞", reply_markup=get_start_keyboard())
    await state.set_state(FSM.RegLogState)

def get_start_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
            InlineKeyboardButton(text="–í—Ö–æ–¥", callback_data="login")
        ]
    ])
    return keyboard

@dp.callback_query(FSM.RegLogState, F.data == "register")
async def process_register(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(type = "register")
    await callback.message.answer("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω:")
    await state.set_state(FSM.Login)

@dp.callback_query(FSM.RegLogState, F.data == "login")
async def process_login(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(type = "login")
    await callback.message.answer("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω:")
    await state.set_state(FSM.Login)

@dp.message(FSM.Login)
async def login_getter(message: types.Message, state: FSMContext):
    await state.update_data(username = message.text)
    await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(FSM.Password)

@dp.message(FSM.Password)
async def password_getter(message: types.Message, state: FSMContext):
    await state.update_data(password = message.text)
    username = await get_data(state, "username")
    password = await get_data(state, "password")
    type = await get_data(state, "type")
    await message.answer("–í–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å: " + username + " " + password)
    user_id = message.from_user.id
    if type == "login":
        if is_user_valid(username, password):
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–Ω–æ–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –¥–µ–ø–∞–ª–∫–µ! –ù–∞–ø–∏—à–∏—Ç–µ /info, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
            await state.set_state(FSM.Depalka)
        else:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã)")
            await state.set_state(FSM.RegLogState)
    if type == "register":
        if new_user(user_id, username, password):
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–µ–ø–∞–ª–∫—É! –ù–∞–ø–∏—à–∏—Ç–µ /info, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
            await state.set_state(FSM.Depalka)
        else:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç)")
            await state.set_state(FSM.RegLogState)

async def get_data(state: FSMContext, key: str):
    data = await state.get_data()
    return str(data.get(key))

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@dp.message(Command("info"), FSM.Depalka)
async def show_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(f"–ù–∏–∫–Ω–µ–π–º: {data["username"]}\n"
                         f"–ï-–±–∞–ª–ª—ã: {eballs_balance(data["username"])}",
                         reply_markup=get_info_keyboard())
    
def get_info_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–≥—Ä—ã", callback_data="games"),
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"),
        ], [
            InlineKeyboardButton(text="–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="logout"),
        ]
    ])
    return keyboard

@dp.callback_query(FSM.Depalka, F.data == "logout")
async def logout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    await state.set_state(FSM.RegLogState)

@dp.callback_query(FSM.Depalka, F.data == "help")
async def get_help(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í –¥–µ–ø–∞–ª–∫–µ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–¥–Ω—è—Ç—å –µ-–±–∞–ª–ª–æ–≤ –∏ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º –∫—Ä—É—Ç—ã–º –≤ —Å–∞–¥–∏–∫–µüòé\n\n"
                                  "ü™ô –ú–æ–Ω–µ—Ç–∫–∞ - –≤—ã–±–∏—Ä–∞–µ—à—å —Å—Ç–æ—Ä–æ–Ω—É –∏ –±—Ä–æ—Å–∞–µ—à—å –º–æ–Ω–µ—Ç–∫—É. "
                                  "–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ–∫–∞–∂–µ—Ç—Å—è –≤–µ—Ä–Ω–æ–π, —Å—Ç–∞–≤–æ—á–∫–∞ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—Å—è x2, –∞ –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π, —Ç–æ –≥—É–ª—è–π –≤–∞—Å—è –∂—É–π –æ–ø–∏–ª–∫–∏\n"
                                  "üí∞ –†—É–ª–µ—Ç–∫–∞ - –Ω—É—ç—ç —Ç–∞–º –∫—Ä—á –∫–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è –∏ —Å—Ç–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ-—Ä–∞–∑–Ω–æ–º—É, —Å–∞–º–∏ —Ä–∞–∑–±–µ—Ä—ë—Ç–µ—Å—å –∫—Ä—á\n"
                                  "üí£ –°–∞–ø—ë—Ä - –µ—Å—Ç—å —Å–µ—Ç–∫–∞ –∏–∑ –ø–ª–∏—Ç–æ–∫, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –ª–∏–±–æ –ø—Ä–∏–∑, –ª–∏–±–æ –º–∏–Ω–∞. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–ª–∏—Ç–∫–∏ –º–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–∑, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥—ç–º–±–ª–∏—Ç—å. "
                                  "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –º–∏–Ω—É - –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ª–æ—Ö)",
                                  reply_markup=get_help_keyboard())
    
def get_help_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="info")
        ]
    ])
    return keyboard

@dp.callback_query(FSM.Depalka, F.data == "games")
async def choose_game(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É", reply_markup=get_games_keyboard())

def get_games_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–æ–Ω–µ—Ç–∫–∞", callback_data="money_flip"),
            InlineKeyboardButton(text="–†—É–ª–µ—Ç–∫–∞", callback_data="roulette"),
        ], [
            InlineKeyboardButton(text="–°–∞–ø—ë—Ä", callback_data="dig"),
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="info"),
        ]
    ])
    return keyboard

@dp.callback_query(FSM.Depalka, F.data == "info")
async def back_to_info(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.answer(f"–ù–∏–∫–Ω–µ–π–º: {data["username"]}\n"
                         f"–ï-–±–∞–ª–ª—ã: {eballs_balance(data["username"])}",
                         reply_markup=get_info_keyboard())

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())