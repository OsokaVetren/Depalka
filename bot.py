#–∏–º–ø–æ—Ä—Ç —Ä–∞–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –Ω–∞—Ö—É–π
import asyncio
import logging
import random
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from Config.config_reader import config
from bd_handler import is_user_valid, new_user, eballs_balance, eballs_change, log_game, get_user_stats


# –∫—Ç–æ –æ—Ç–∫–∞—Ç–∏—Ç –∫–æ–º–º–∏—Ç —Ç–æ—Ç –≥–µ–π

#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¥‚£∂‚£∂‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†ü‚†õ‚†õ‚†õ‚†õ‚†õ‚¢ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£Å‚£§‚£¥‚£∂‚£§‚£Ä‚¢Ä‚£¥‚£∂‚£∂‚£¶‚£∏‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚†ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚¢ø‚£ø‚£ø‚£ø‚†õ‚£ø‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚£è‚°è‚†Ä‚†ô‚†õ‚†ã‚£°‚£¥‚£¶‚£º‚°ç‚†â‚†Å‚†Ä‚¢∏‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†ª‚£Ω‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚£à‚°â‚†Å‚†Ä‚†Ä‚†Ä‚£∏‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚¢†‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£∑‚£§‚£§‚£Ä‚£Ä‚†Ä‚†§‚†§‚£§‚£∂‚£ø‚£ø‚£∂‚£¶‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚¢Ñ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†â‚°ö‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ß‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚†ø‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†à‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä
#‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä
#‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á
#‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á
#‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É
#‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä
#‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∫‚£ø‚°ª‚£ø‚°ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†®‚†ø‚£ø‚†õ‚¢ª‚°Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ß‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#‚†Ä‚†Ä‚†Ä‚¢∏‚†ø‚°ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.bot_token.get_secret_value())
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


class FSM(StatesGroup):
    RegLogState = State()
    Login = State()
    Password = State()
    Depalka = State()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç–µ–ª—å–Ω–∏–∫! –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π - —Ç—ã –≤–æ—à—ë–ª –≤ –¥–æ–¥–µ–ø–∞–ª–∫—É, —Ç–≥-–±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –µ-–±–∞–ª–ª–æ–≤. –ï—Å—Ç—å –¥–≤–∞ —Å—Ç—É–ª–∞", reply_markup=get_start_keyboard())
    await state.set_state(FSM.RegLogState)

def get_start_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
            InlineKeyboardButton(text="–í—Ö–æ–¥", callback_data="login")
        ]
    ])
    return keyboard

@dp.callback_query(FSM.RegLogState, F.data == "register")
async def process_register(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(type = "register")
    await callback.message.answer("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω:")
    await state.set_state(FSM.Login)

@dp.callback_query(FSM.RegLogState, F.data == "login")
async def process_login(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(type = "login")
    await callback.message.answer("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω:")
    await state.set_state(FSM.Login)

@dp.message(FSM.Login)
async def login_getter(message: types.Message, state: FSMContext):
    await state.update_data(username = message.text)
    await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(FSM.Password)

@dp.message(FSM.Password)
async def password_getter(message: types.Message, state: FSMContext):
    await state.update_data(password = message.text)
    username = await get_data(state, "username")
    password = await get_data(state, "password")
    type = await get_data(state, "type")
    await message.answer("–í–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å: " + username + " " + password)
    user_id = message.from_user.id
    if type == "login":
        if is_user_valid(username, password):
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–Ω–æ–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –¥–µ–ø–∞–ª–∫–µ! –ù–∞–ø–∏—à–∏—Ç–µ /info, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
            await state.set_state(FSM.Depalka)
        else:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã)")
            await state.set_state(FSM.RegLogState)
    if type == "register":
        if new_user(user_id, username, password):
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–µ–ø–∞–ª–∫—É! –ù–∞–ø–∏—à–∏—Ç–µ /info, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
            await state.set_state(FSM.Depalka)
        else:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç)")
            await state.set_state(FSM.RegLogState)

async def get_data(state: FSMContext, key: str):
    data = await state.get_data()
    return str(data.get(key))


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@dp.message(Command("info"), FSM.Depalka)
async def show_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(f"–ù–∏–∫–Ω–µ–π–º: {data['username']}\n"
                         f"–ï-–±–∞–ª–ª—ã: {eballs_balance(data['username'])}",
                         reply_markup=get_info_keyboard())
    
def get_info_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–≥—Ä—ã", callback_data="games"),
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"),
        ], [
            InlineKeyboardButton(text="–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="logout"),
        ]
    ])
    return keyboard

@dp.callback_query(FSM.Depalka, F.data == "logout")
async def logout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    await state.set_state(FSM.RegLogState)

@dp.callback_query(FSM.Depalka, F.data == "help")
async def get_help(callback: types.CallbackQuery):
    await callback.message.edit_text("–í –¥–µ–ø–∞–ª–∫–µ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–¥–Ω—è—Ç—å –µ-–±–∞–ª–ª–æ–≤ –∏ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º –∫—Ä—É—Ç—ã–º –≤ —Å–∞–¥–∏–∫–µüòé\n\n"
                                  "ü™ô –ú–æ–Ω–µ—Ç–∫–∞ - –≤—ã–±–∏—Ä–∞–µ—à—å —Å—Ç–æ—Ä–æ–Ω—É –∏ –±—Ä–æ—Å–∞–µ—à—å –º–æ–Ω–µ—Ç–∫—É. "
                                  "–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ–∫–∞–∂–µ—Ç—Å—è –≤–µ—Ä–Ω–æ–π, —Å—Ç–∞–≤–æ—á–∫–∞ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—Å—è x2, –∞ –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π, —Ç–æ –≥—É–ª—è–π –≤–∞—Å—è –∂—É–π –æ–ø–∏–ª–∫–∏\n"
                                  "üí∞ –†—É–ª–µ—Ç–∫–∞ - —Ç–∞–º –∫—Ä—á –∫–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è –∏ —Å—Ç–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ-—Ä–∞–∑–Ω–æ–º—É, —Å–∞–º–∏ —Ä–∞–∑–±–µ—Ä—ë—Ç–µ—Å—å –∫—Ä—á\n"
                                  "üí£ –°–∞–ø—ë—Ä - –µ—Å—Ç—å —Å–µ—Ç–∫–∞ –∏–∑ –ø–ª–∏—Ç–æ–∫, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –ª–∏–±–æ –ø—Ä–∏–∑, –ª–∏–±–æ –º–∏–Ω–∞. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–ª–∏—Ç–∫–∏ –º–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–∑, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥—ç–º–±–ª–∏—Ç—å. "
                                  "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –º–∏–Ω—É - –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ª–æ—Ö)\n"
                                  "üÉè –ë–ª–µ–∫–¥–∂–µ–∫ - —Ç–∏—Ö–∏–π –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, —Ü–µ–ª—å - –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, —á–µ–º –¥–∏–ª–µ—Ä, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 21. "
                                  "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–º–µ–ª–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–æ—á–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–º —Ö–æ–¥—É, –Ω–æ –∏ —à–∞–Ω—Å –æ–ø–æ–¥–ª–∏–≤–∏—Ç—å—Å—è —Å—Ç–∞–Ω–µ—Ç –≤—ã—à–µ\n\n"
                                  "P.S.: –Ω–∞–ø–∏—à–∏ /stats, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∏–≥—Ä, –∏–ª–∏ /pravda, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Çü§´",
                                  reply_markup=get_help_keyboard())
    
def get_help_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="info")
        ]
    ])
    return keyboard

@dp.callback_query(F.data == "info")
async def back_to_info(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(FSM.Depalka)
    await callback.message.edit_text(f"–ù–∏–∫–Ω–µ–π–º: {data['username']}\n"
                                  f"–ï-–±–∞–ª–ª—ã: {eballs_balance(data['username'])}",
                                  reply_markup=get_info_keyboard())

@dp.callback_query(FSM.Depalka, F.data == "games")
async def choose_game(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É", reply_markup=get_games_keyboard())

def get_games_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–æ–Ω–µ—Ç–∫–∞", callback_data="coinflip"),
            InlineKeyboardButton(text="–†—É–ª–µ—Ç–∫–∞", callback_data="roulette"),
        ], [
            InlineKeyboardButton(text="–°–∞–ø—ë—Ä", callback_data="dig"),
            InlineKeyboardButton(text="–ë–ª–µ–∫–¥–∂–µ–∫", callback_data="blackjack"),
        ], [
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="info"),
        ]
    ])
    return keyboard


# -------------------- –°–∞–ø—ë—Ä --------------------
@dp.callback_query(FSM.Depalka, F.data == "dig")
async def start_dig_game(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(DigFSM.Bet)
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (>= 5):")

class DigFSM(StatesGroup):
    Bet = State()
    Playing = State()

@dp.message(DigFSM.Bet)
async def set_dig_bet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        bet = int(message.text)
        if bet < 5:
            raise ValueError
        if eballs_balance(data["username"]) < bet:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –¥–µ–Ω—è–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ >= 5, –º–∞–º–∫–∏–Ω —Ç–µ—Å—Ç–µ—Ä")
        return
    
    eballs_change(data["username"], -bet)
    field = generate_field()
    await state.update_data(
        bet=bet,
        field=field,
        opened=[],
        profit=0
    )
    await state.set_state(DigFSM.Playing)
    await message.answer(
        f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {bet} –µ-–±–∞–ª–ª–æ–≤\n"
        "–í—ã–±–∏—Ä–∞–π –∫–ª–µ—Ç–∫—É:",
        reply_markup=get_field_keyboard([])
    )

SIZE = 5
MINES_COUNT = 5

def generate_field(size=SIZE, mines_count=MINES_COUNT):
    field = [[0] * size for i in range(size)]
    mines = set()
    while len(mines) < mines_count:
        r = random.randint(0, size - 1)
        c = random.randint(0, size - 1)
        mines.add((r, c))
    for r, c in mines:
        field[r][c] = 1
    return field

def get_field_keyboard(opened, size=SIZE):
    keyboard = []
    for r in range(size):
        row = []
        for c in range(size):
            if (r, c) in opened:
                row.append(InlineKeyboardButton(text="‚úÖ", callback_data="norm"))
            else:
                row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"dig_{r}_{c}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å", callback_data="cashout")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(DigFSM.Playing, F.data.startswith("dig_"))
async def dig_cell(callback: types.CallbackQuery, state: FSMContext):
    r, c = map(int, callback.data.split("_")[1:])
    data = await state.get_data()
    field = data["field"]
    opened = data["opened"]
    profit = data["profit"]
    bet = data["bet"]
    username = data["username"]

    if field[r][c] == 1:
        await state.update_data(profit=0)
        details = {
            "opened_cells": len(opened),
            "hit_mine_at": f"{r},{c}"
        }
        log_game(username, "dig", bet, "lose", 0, details)
        await callback.message.edit_text(
            f"üí• –ë—É–º! –¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet} –µ-–±–∞–ª–ª–æ–≤!"
        )
        await state.set_state(FSM.Depalka)
    else:
        opened.append((r, c))
        profit += int(round(bet * 0.2))
        await state.update_data(opened=opened, profit=profit)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {profit} –µ-–±–∞–ª–ª–æ–≤",
            reply_markup=get_field_keyboard(opened)
        )

@dp.callback_query(DigFSM.Playing, F.data == "cashout")
async def cashout(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    profit = data["profit"]
    bet = data["bet"]
    username = data["username"]
    opened = data["opened"]

    eballs_change(data["username"], profit)
    details = {
        "opened_cells": len(opened),
        "cashout_profit": profit
    }
    log_game(username, "dig", bet, "win", profit, details)
    await callback.message.edit_text(
        f"–¢—ã –∑–∞–±—Ä–∞–ª {profit} –µ-–±–∞–ª–ª–æ–≤ —Å–æ —Å—Ç–∞–≤–∫–∏ {bet}"
    )
    await state.set_state(FSM.Depalka)


# -------------------- –ú–æ–Ω–µ—Ç–∫–∞ --------------------
@dp.callback_query(FSM.Depalka, F.data == "coinflip")
async def start_coin_game(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(CoinFSM.Bet)
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (>= 5):")

class CoinFSM(StatesGroup):
    Bet = State()
    Playing = State()

@dp.message(CoinFSM.Bet)
async def set_coin_bet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        bet = int(message.text)
        if bet < 5:
            raise ValueError
        if eballs_balance(data["username"]) < bet:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –¥–µ–Ω—è–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ >= 5, –º–∞–º–∫–∏–Ω —Ç–µ—Å—Ç–µ—Ä")
        return

    await state.update_data(bet=bet)
    await state.set_state(CoinFSM.Playing)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ä–µ–ª", callback_data="coin_heads"),
            InlineKeyboardButton(text="–†–µ—à–∫–∞", callback_data="coin_tails")
        ],
        [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="info")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É:", reply_markup=keyboard)
    

@dp.callback_query(CoinFSM.Playing, F.data.startswith("coin_"))
async def coin_result(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data["username"]
    bet = data["bet"]
    user_choice = callback.data.split("_")[1]

    eballs_change(username, -bet)  # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    flip_result = random.choices(["heads", "tails", "edge"], weights=[49, 49, 2])[0]

    details = {
        "user_choice": user_choice,
        "flip_result": flip_result
    }

    if flip_result == user_choice:
        prize = bet * 2
        eballs_change(username, prize)
        log_game(username, "coinflip", bet, "win", prize, details)
        await callback.message.edit_text(
            f"ü™ô {'–í—ã–ø–∞–ª –û—Ä–µ–ª' if flip_result == 'heads' else '–í—ã–ø–∞–ª–∞ –†–µ—à–∫–∞'}!\n"
            f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª {prize} –µ-–±–∞–ª–ª–æ–≤ üéâ"
        )
    elif flip_result == "edge":
        bonus = bet//2
        eballs_change(username, bonus)
        log_game(username, "coinflip", bet, "draw", bonus, details)
        await callback.message.edit_text(
            f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞ –≤—Å—Ç–∞–ª–∞ –Ω–∞ —Ä–µ–±—Ä–æ! ü§Ø\n"
            f"–°—Ç–∞–≤–æ—á–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞, –Ω–æ –∫—ç—à–±–µ–∫ {bonus} –µ-–±–∞–ª–ª–æ–≤!"
        )
    else:
        log_game(username, "coinflip", bet, "lose", 0, details)
        await callback.message.edit_text(
            f"ü™ô {'–í—ã–ø–∞–ª –û—Ä–µ–ª' if flip_result == 'heads' else '–í—ã–ø–∞–ª–∞ –†–µ—à–∫–∞'}!\n"
            f"–¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet} –µ-–±–∞–ª–ª–æ–≤ üíÄ"
        )

    await state.set_state(FSM.Depalka)


# -------------------- –ë–ª–µ–∫–¥–∂–µ–∫ --------------------
@dp.callback_query(FSM.Depalka, F.data == "blackjack")
async def start_blackjack_game(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BlackjackFSM.Bet)
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (>= 5):")

class BlackjackFSM(StatesGroup):
    Bet = State()
    Playing = State()

@dp.message(BlackjackFSM.Bet)
async def set_blackjack_bet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        bet = int(message.text)
        if bet < 5:
            raise ValueError
        if eballs_balance(data["username"]) < bet:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –¥–µ–Ω—è–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ >= 5, –º–∞–º–∫–∏–Ω —Ç–µ—Å—Ç–µ—Ä")
        return
    
    eballs_change(data["username"], -bet)
    deck = create_deck()
    player_hand = [draw_card(deck), draw_card(deck)]
    dealer_hand = [draw_card(deck), draw_card(deck)]
    
    await state.update_data(
        bet=bet,
        deck=deck,
        player_hand=player_hand,
        dealer_hand=dealer_hand,
        game_over=False
    )
    await state.set_state(BlackjackFSM.Playing)
    
    player_score = calculate_score(player_hand)
    dealer_score = calculate_score(dealer_hand)
    
    details = {
        "player_hand": player_hand,
        "dealer_hand": dealer_hand,
        "player_score": player_score,
        "dealer_score": dealer_score,
        "doubled": False
    }

    if player_score == 21 and dealer_score == 21:
        eballs_change(data["username"], bet)
        log_game(data["username"], "blackjack", bet, "draw", bet, details)
        await message.answer(
            f"üÉè BLACKJACK!\n\n"
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand)} = {dealer_score}\n\n"
            f"–ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {bet} –µ-–±–∞–ª–ª–æ–≤"
        )
        await state.set_state(FSM.Depalka)
    elif player_score == 21:
        prize = int(bet * 2.5)
        eballs_change(data["username"], prize)
        log_game(data["username"], "blackjack", bet, "win", prize, details)
        await message.answer(
            f"üÉè BLACKJACK!\n\n"
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand, hide_first=True)}\n\n"
            f"üéâ –ë–ª–µ–∫–¥–∂–µ–∫! –¢—ã –≤—ã–∏–≥—Ä–∞–ª {prize} –µ-–±–∞–ª–ª–æ–≤!"
        )
        await state.set_state(FSM.Depalka)
    else:
        await message.answer(
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand, hide_first=True)}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
            reply_markup=get_blackjack_keyboard(player_hand)
        )

def create_deck():
    suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    deck = []
    for suit in suits:
        for rank in ranks:
            deck.append(f"{rank}{suit}")
    random.shuffle(deck)
    return deck

def draw_card(deck):
    return deck.pop()

def card_value(card):
    rank = card[:-1]
    if rank in ['J', 'Q', 'K']:
        return 10
    elif rank == 'A':
        return 11
    else:
        return int(rank)

def calculate_score(hand):
    score = 0
    aces = 0
    
    for card in hand:
        value = card_value(card)
        if value == 11:  # —Ç—É–∑
            aces += 1
        score += value
    
    while score > 21 and aces > 0:
        score -= 10
        aces -= 1
    
    return score

def format_hand(hand, hide_first=False):
    if hide_first:
        return f"üé¥ {' '.join(hand[1:])}"
    return ' '.join(hand)

def get_blackjack_keyboard(player_hand):
    keyboard = [
        [
            InlineKeyboardButton(text="üÉè –í–∑—è—Ç—å", callback_data="bj_hit"),
            InlineKeyboardButton(text="‚úã –°—Ç–æ–ø", callback_data="bj_stand")
        ]
    ]
    
    if len(player_hand) == 2:  # –ø–µ—Ä–≤—ã–π —Ö–æ–¥
        keyboard.append([InlineKeyboardButton(text="‚ö° –£–¥–≤–æ–∏—Ç—å", callback_data="bj_double")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(BlackjackFSM.Playing, F.data == "bj_hit")
async def blackjack_hit(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    deck = data["deck"]
    player_hand = data["player_hand"]
    dealer_hand = data["dealer_hand"]
    bet = data["bet"]
    username = data["username"]
    
    player_hand.append(draw_card(deck))
    player_score = calculate_score(player_hand)
    dealer_score = calculate_score(dealer_hand)
    
    await state.update_data(player_hand=player_hand, deck=deck)
    
    details = {
        "player_hand": player_hand,
        "dealer_hand": dealer_hand,
        "player_score": player_score,
        "dealer_score": dealer_score,
        "doubled": False
    }

    if player_score > 21:
        log_game(username, "blackjack", bet, "lose", 0, details)
        await callback.message.edit_text(
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand, hide_first=True)}\n\n"
            f"üíÄ –ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet} –µ-–±–∞–ª–ª–æ–≤"
        )
        await state.set_state(FSM.Depalka)
    elif player_score == 21:
        await dealer_turn(callback.message, state)
    else:
        await callback.message.edit_text(
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand, hide_first=True)}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
            reply_markup=get_blackjack_keyboard(player_hand)
        )

@dp.callback_query(BlackjackFSM.Playing, F.data == "bj_stand")
async def blackjack_stand(callback: types.CallbackQuery, state: FSMContext):
    await dealer_turn(callback.message, state)

@dp.callback_query(BlackjackFSM.Playing, F.data == "bj_double")
async def blackjack_double(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bet = data["bet"]
    username = data["username"]
    
    if eballs_balance(username) < bet:
        await callback.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!")
        return
    
    eballs_change(username, -bet)
    
    deck = data["deck"]
    player_hand = data["player_hand"]
    dealer_hand = data["dealer_hand"]
    
    player_hand.append(draw_card(deck))
    player_score = calculate_score(player_hand)
    dealer_score = calculate_score(dealer_hand)
    
    await state.update_data(
        player_hand=player_hand,
        deck=deck,
        bet=bet * 2
    )
    
    details = {
        "player_hand": player_hand,
        "dealer_hand": dealer_hand,
        "player_score": player_score,
        "dealer_score": dealer_score,
        "doubled": True
    }

    if player_score > 21:
        log_game(username, "blackjack", bet*2, "lose", 0, details)
        await callback.message.edit_text(
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand, hide_first=True)}\n\n"
            f"üíÄ –ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet * 2} –µ-–±–∞–ª–ª–æ–≤"
        )
        await state.set_state(FSM.Depalka)
    else:
        await dealer_turn(callback.message, state, doubled=True)

async def dealer_turn(message, state, doubled=False):
    data = await state.get_data()
    deck = data["deck"]
    player_hand = data["player_hand"]
    dealer_hand = data["dealer_hand"]
    bet = data["bet"]
    username = data["username"]
    
    player_score = calculate_score(player_hand)
    dealer_score = calculate_score(dealer_hand)
    
    while dealer_score < 17:
        dealer_hand.append(draw_card(deck))
        dealer_score = calculate_score(dealer_hand)
    
    result_text = (
        f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {format_hand(player_hand)} = {player_score}\n"
        f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_hand(dealer_hand)} = {dealer_score}\n\n"
    )
    
    details = {
        "player_hand": player_hand,
        "dealer_hand": dealer_hand,
        "player_score": player_score,
        "dealer_score": dealer_score,
        "doubled": doubled
    }

    if dealer_score > 21:
        prize = bet * 2
        eballs_change(username, prize)
        log_game(username, "blackjack", bet, "win", prize, details)
        result_text += f"üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –¢—ã –≤—ã–∏–≥—Ä–∞–ª {prize} –µ-–±–∞–ª–ª–æ–≤!"
    elif player_score > dealer_score:
        prize = bet * 2
        eballs_change(username, prize)
        log_game(username, "blackjack", bet, "win", prize, details)
        result_text += f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {prize} –µ-–±–∞–ª–ª–æ–≤!"
    elif player_score == dealer_score:
        eballs_change(username, bet)
        log_game(username, "blackjack", bet, "draw", bet, details)
        result_text += f"ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {bet} –µ-–±–∞–ª–ª–æ–≤"
    else:
        log_game(username, "blackjack", bet, "lose", 0, details)
        result_text += f"üíÄ –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª! –¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet} –µ-–±–∞–ª–ª–æ–≤"
    
    await message.edit_text(result_text)
    await state.set_state(FSM.Depalka)


# -------------------- –†—É–ª–µ—Ç–∫–∞ --------------------
@dp.callback_query(FSM.Depalka, F.data == "roulette")
async def start_roulette_game(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(RouletteFSM.Bet)
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (>= 5):")

class RouletteFSM(StatesGroup):
    Bet = State()
    Playing = State()

@dp.message(RouletteFSM.Bet)
async def set_roulette_bet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        bet = int(message.text)
        if bet < 5:
            raise ValueError
        if eballs_balance(data["username"]) < bet:
            await message.answer("–ï–±–∞—Ç—å —Ç—ã –ª–æ—Ö, –¥–µ–Ω—è–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ >= 5, –º–∞–º–∫–∏–Ω —Ç–µ—Å—Ç–µ—Ä")
        return

    await state.update_data(bet=bet)
    await state.set_state(RouletteFSM.Playing)
    await message.answer(
        "üé∞ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:\n\n"
        "üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x2) - —á–∏—Å–ª–∞: 1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36\n"
        "‚ö´ –ß—ë—Ä–Ω–æ–µ (x2) - —á–∏—Å–ª–∞: 2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35\n"
        "üü¢ –ó–µ—Ä–æ (x36) - —á–∏—Å–ª–æ 0\n"
        "üìä –ß—ë—Ç–Ω–æ–µ/–ù–µ—á—ë—Ç–Ω–æ–µ (x2)\n"
        "üìà –í—ã—Å–æ–∫–∏–µ/–ù–∏–∑–∫–∏–µ (x2) - –Ω–∏–∑–∫–∏–µ: 1-18, –≤—ã—Å–æ–∫–∏–µ: 19-36\n"
        "üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (x36) –æ—Ç 1 –¥–æ 36",
        reply_markup=get_roulette_keyboard()
    )

def get_roulette_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="roulette_red"),
            InlineKeyboardButton(text="‚ö´ –ß—ë—Ä–Ω–æ–µ", callback_data="roulette_black"),
            InlineKeyboardButton(text="üü¢ –ó–µ—Ä–æ", callback_data="roulette_zero")
        ],
        [
            InlineKeyboardButton(text="–ß—ë—Ç–Ω–æ–µ", callback_data="roulette_even"),
            InlineKeyboardButton(text="–ù–µ—á—ë—Ç–Ω–æ–µ", callback_data="roulette_odd")
        ],
        [
            InlineKeyboardButton(text="–ù–∏–∑–∫–∏–µ (1-18)", callback_data="roulette_low"),
            InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–µ (19-36)", callback_data="roulette_high")
        ],
        [
            InlineKeyboardButton(text="üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ", callback_data="roulette_number")
        ],
        [
            InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="info")
        ]
    ])
    return keyboard

RED_NUMBERS = {1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36}
BLACK_NUMBERS = {2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35}

@dp.callback_query(RouletteFSM.Playing, F.data.startswith("roulette_"))
async def roulette_bet_handler(callback: types.CallbackQuery, state: FSMContext):
    bet_type = callback.data.split("_")[1]
    
    if bet_type == "number":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="roulette_back")]
            ])
        )
        await state.update_data(awaiting_number=True)
        return
    
    await state.update_data(bet_type=bet_type)
    await spin_roulette(callback, state)

@dp.message(RouletteFSM.Playing)
async def number_input_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("awaiting_number"):
        return
        
    try:
        number = int(message.text)
        if not (1 <= number <= 36):
            raise ValueError
    except ValueError:
        await message.answer("–≠—Ç–æ –Ω–µ –æ—Ç 1 –¥–æ 36 –∞–ª–æ")
        return
    
    await state.update_data(bet_type="number", chosen_number=number, awaiting_number=False)
    await spin_roulette_message(message, state)

@dp.callback_query(RouletteFSM.Playing, F.data == "roulette_back")
async def roulette_back(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(awaiting_number=False)
    await callback.message.edit_text(
        "üé∞ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:\n\n"
        "üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x2) - —á–∏—Å–ª–∞: 1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36\n"
        "‚ö´ –ß—ë—Ä–Ω–æ–µ (x2) - —á–∏—Å–ª–∞: 2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35\n"
        "üü¢ –ó–µ—Ä–æ (x36) - —á–∏—Å–ª–æ 0\n"
        "üìä –ß—ë—Ç–Ω–æ–µ/–ù–µ—á—ë—Ç–Ω–æ–µ (x2)\n"
        "üìà –í—ã—Å–æ–∫–∏–µ/–ù–∏–∑–∫–∏–µ (x2) - –Ω–∏–∑–∫–∏–µ: 1-18, –≤—ã—Å–æ–∫–∏–µ: 19-36\n"
        "üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (x36) –æ—Ç 1 –¥–æ 36",
        reply_markup=get_roulette_keyboard()
    )

async def spin_roulette(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É... üé∞")
    await asyncio.sleep(2)
    
    winning_number = random.randint(0, 36)
    
    data = await state.get_data()
    bet = data["bet"]
    bet_type = data["bet_type"]
    username = data["username"]
    
    if winning_number == 0:
        color_emoji = "üü¢"
        color_name = "–ó–ï–†–û"
    elif winning_number in RED_NUMBERS:
        color_emoji = "üî¥"
        color_name = "–∫—Ä–∞—Å–Ω–æ–µ"
    else:
        color_emoji = "‚ö´"
        color_name = "—á—ë—Ä–Ω–æ–µ"
    
    win = False
    multiplier = 0
    
    if bet_type == "red" and winning_number in RED_NUMBERS:
        win = True
        multiplier = 2
    elif bet_type == "black" and winning_number in BLACK_NUMBERS:
        win = True
        multiplier = 2
    elif bet_type == "zero" and winning_number == 0:
        win = True
        multiplier = 36
    elif bet_type == "even" and winning_number > 0 and winning_number % 2 == 0:
        win = True
        multiplier = 2
    elif bet_type == "odd" and winning_number % 2 == 1:
        win = True
        multiplier = 2
    elif bet_type == "low" and 1 <= winning_number <= 18:
        win = True
        multiplier = 2
    elif bet_type == "high" and 19 <= winning_number <= 36:
        win = True
        multiplier = 2
    
    eballs_change(username, -bet)
    
    result_text = f"üé∞ –í—ã–ø–∞–ª–æ: {color_emoji} {winning_number} ({color_name})\n\n"

    details = {
        "bet_type": bet_type,
        "winning_number": winning_number
    }

    if win:
        prize = bet * multiplier
        eballs_change(username, prize)
        log_game(username, "roulette", bet, "win", prize, details)
        result_text += f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {prize} –µ-–±–∞–ª–ª–æ–≤! (x{multiplier})"
    else:
        log_game(username, "roulette", bet, "lose", 0, details)
        result_text += f"üíÄ –¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet} –µ-–±–∞–ª–ª–æ–≤"
    
    await callback.message.edit_text(result_text)
    await state.set_state(FSM.Depalka)

async def spin_roulette_message(message: types.Message, state: FSMContext):
    await message.answer("–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É... üé∞")
    await asyncio.sleep(2)

    winning_number = random.randint(0, 36)
    
    data = await state.get_data()
    bet = data["bet"]
    bet_type = data["bet_type"]
    username = data["username"]
    chosen_number = data.get("chosen_number")
    
    if winning_number == 0:
        color_emoji = "üü¢"
        color_name = "–ó–ï–†–û"
    elif winning_number in RED_NUMBERS:
        color_emoji = "üî¥"
        color_name = "–∫—Ä–∞—Å–Ω–æ–µ"
    else:
        color_emoji = "‚ö´"
        color_name = "—á—ë—Ä–Ω–æ–µ"
    
    win = winning_number == chosen_number
    multiplier = 36 if win else 0
    
    eballs_change(username, -bet)
    
    result_text = f"üé∞ –í—ã–ø–∞–ª–æ: {color_emoji} {winning_number} ({color_name})\n"
    result_text += f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –Ω–∞: {chosen_number}\n\n"
    
    details = {
        "bet_type": "number",
        "chosen_number": chosen_number,
        "winning_number": winning_number
    }

    if win:
        prize = bet * multiplier
        eballs_change(username, prize)
        log_game(username, "roulette", bet, "win", prize, details)
        result_text += f"üéâ –î–ñ–ï–ö–ü–û–¢! –¢—ã —É–≥–∞–¥–∞–ª —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ! –í—ã–∏–≥—Ä–∞–ª {prize} –µ-–±–∞–ª–ª–æ–≤! (x{multiplier})"
    else:
        log_game(username, "roulette", bet, "lose", 0, details)
        result_text += f"üíÄ –¢—ã –ø—Ä–æ—Å—Ä–∞–ª {bet} –µ-–±–∞–ª–ª–æ–≤"
    
    await message.answer(result_text)
    await state.set_state(FSM.Depalka)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stats
@dp.message(Command("stats"), FSM.Depalka)
async def show_stats(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data["username"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = get_user_stats(username, 5)
    
    if not user_stats:
        await message.answer("–¢–∞–∫ —Ç—ã –∂–µ –Ω–µ –∏–≥—Ä–∞–ª –µ—â–µ")
        return
    
    stats_text = f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä:\n\n"
    
    for i, game in enumerate(user_stats, 1):
        game_type_names = {
            'coinflip': 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞',
            'roulette': 'üí∞ –†—É–ª–µ—Ç–∫–∞', 
            'blackjack': 'üÉè –ë–ª–µ–∫–¥–∂–µ–∫',
            'dig': 'üí£ –°–∞–ø—ë—Ä'
        }
        
        result_emoji = {
            'win': 'üéâ',
            'lose': 'üíÄ', 
            'draw': 'ü§ù'
        }
        
        game_name = game_type_names.get(game['game_type'])
        result = result_emoji.get(game['result'])
        
        stats_text += f"{i}. {game_name}\n"
        stats_text += f"   –°—Ç–∞–≤–∫–∞: {game['bet_amount']} | –ü—Ä–∏–∑: {game['prize_amount']} {result}\n\n"
    
    await message.answer(stats_text)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /pravda
@dp.message(Command('pravda'), FSM.Depalka)
async def upload_photo(message: types.Message):
    photo = FSInputFile("pravda.jpg")
    await message.answer_photo(
            photo,
            caption="—á—Ç–æ –≤–∞—Å –∂–¥—ë—Ç"
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
